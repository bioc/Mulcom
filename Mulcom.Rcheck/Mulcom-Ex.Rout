
R version 2.12.0 alpha (2010-09-22 r52970)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Mulcom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Mulcom')
Loading required package: fields
Loading required package: spam
Package 'spam' is loaded. Spam version 0.23-0 (2010-09-01).
Type demo( spam) for some demos, help( Spam) for an overview
of this package.
Help for individual functions is optained by adding the
suffix '.spam' to the function name, e.g. 'help(chol.spam)'.

Attaching package: 'spam'

The following object(s) are masked from 'package:base':

    backsolve, forwardsolve, norm

 Use help(fields) for an overview of this library

library( fields, keep.source=TRUE) retains comments in the source code. 
Loading required package: Biobase

Welcome to Bioconductor

  Vignettes contain introductory material. To view, type
  'openVignette()'. To cite Bioconductor, see
  'citation("Biobase")' and for packages 'citation(pkgname)'.

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MULCOM-class")
> ### * MULCOM-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MULCOM-class
> ### Title: Class MulCom
> ### Aliases: class:MULCOM MULCOM-class MULCOM
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_scores <- mulScores(Affy, Affy$Groups)
> 
> 
> 
> cleanEx()
> nameEx("MULCOM_P")
> ### * MULCOM_P
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MULCOM_P-class
> ### Title: Class MulCom Permutation
> ### Aliases: class:MULCOM_P MULCOM_P-class MULCOM_P
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_scores <- mulScores(Affy, Affy$Groups)
> 
> 
> 
> cleanEx()
> nameEx("mulCAND")
> ### * mulCAND
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulCAND
> ### Title: Identify the Mulcom candidate feature selection
> ### Aliases: mulCAND
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10,2)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> mulcom_cand <- mulCAND(Affy, mulcom_perm, 0.2, 2)
> 
> 
> 
> cleanEx()
> nameEx("mulCalc")
> ### * mulCalc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulCalc
> ### Title: MulCom Calculation
> ### Aliases: mulCalc mulCalc
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_scores <- mulScores(Affy, Affy$Groups)
> mulcom_calc <- mulCalc(mulcom_scores, 0.2, 2)
> 
> 
> 
> cleanEx()
> nameEx("mulDELTA")
> ### * mulDELTA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulDELTA
> ### Title: MulCom Delta
> ### Aliases: mulDELTA
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_delta <- mulDELTA(exprs(Affy[1,]),Affy$Groups)
> 
> 
> 
> 
> cleanEx()
> nameEx("mulDiff")
> ### * mulDiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulDiff
> ### Title: MulCom Test Differential analysis
> ### Aliases: mulDiff
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10, 7)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> mulcom_diff <- mulDiff(Affy, mulcom_perm, 0.2, 2)
> 
> 
> 
> cleanEx()
> nameEx("mulFSG")
> ### * mulFSG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulFSG
> ### Title: MulCom False Significant Genes
> ### Aliases: mulFSG
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10, 7)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> mulcom_fsg <- mulFSG(mulcom_perm, 0.2, 2)
> 
> 
> 
> cleanEx()
> nameEx("mulOpt")
> ### * mulOpt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulOpt
> ### Title: MulCom optimization
> ### Aliases: mulOpt
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10, 7)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> mulcom_opt <- mulOpt(mulcom_perm, seq(0.1, 0.5, 0.1), seq(1, 3, 0.1))
MulCom optimization starts
initializing ...
0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%  done
> 
> 
> 
> cleanEx()
> nameEx("mulOptPars")
> ### * mulOptPars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulOptPars
> ### Title: MulCom Parameter Optimization
> ### Aliases: mulOptPars
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10, 7)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> #mulcom_opt <- mulOpt(mulcom_perm, seq(0.1, 0.5, 0.1), seq(1, 3, 0.1))
> #optThs <- mulOptPars(mulcom_opt, 1, 0.05)
> 
> 
> 
> cleanEx()
> nameEx("mulOptPlot")
> ### * mulOptPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulOptPlot
> ### Title: MulCom optimization Plot
> ### Aliases: mulOptPlot mulOptPlot
> ### Keywords: MulCom
> 
> ### ** Examples
> 
>    data(benchVign)
>    mulcom_perm <- mulPerm(Affy, Affy$Groups, 10,2)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
>    mulcom_opt <- mulOpt(mulcom_perm, vm=seq(0.1, 0.5, 0.1), vt=seq(1, 3,1))
MulCom optimization starts
initializing ...
0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%  done
>    mulOptPlot(mulcom_opt, 1, 0.05)
> 
> 
> 
> cleanEx()
> nameEx("mulParOpt")
> ### * mulParOpt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulParOpt
> ### Title: MulCom Parameters Optimization
> ### Aliases: mulParOpt
> ### Keywords: MulCom
> 
> ### ** Examples
> 
>    data(benchVign)
>    mulcom_perm <- mulPerm(Affy, Affy$Groups, 10,2)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
>    mulcom_opt <- mulOpt(mulcom_perm, vm=seq(0.1, 0.5, 0.1), vt=seq(1, 3,1))
MulCom optimization starts
initializing ...
0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%  done
>    mulParOpt(mulcom_perm, mulcom_opt, 1, 0.05)
[1] 901
  t   m 
1.0 0.4 
> 
> 
> 
> cleanEx()
> nameEx("mulPerm")
> ### * mulPerm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulPerm
> ### Title: MulCom Permutation
> ### Aliases: mulPerm
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_perm <- mulPerm(Affy, Affy$Groups, 10,2)
MulCom permutation starts
initializing ...
10% 20% 30% 40% 50% 60% 70% 80% 90% Done
> 
> 
> 
> cleanEx()
> nameEx("mulScores")
> ### * mulScores
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mulScores
> ### Title: MulCom Score Calculation
> ### Aliases: mulScores
> ### Keywords: MulCom
> 
> ### ** Examples
> 
> data(benchVign)
> mulcom_scores <- mulScores(Affy, Affy$Groups)
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  35.76 0.43 36.633 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
